{"version":3,"sources":["components/common/Pagination/NavButton.jsx","components/common/Pagination/Pagination.jsx","components/Friends/Friends.jsx","actions/users.js"],"names":["NavButton","handler","disabledTrigger","icoId","className","onClick","disabled","href","sprite","Pagination","React","memo","pagesCount","currentPage","onPageChange","isLoading","visiblePartSize","useState","visiblePartNumber","setVisiblePartNumber","pages","i","push","visiblePartsCount","Math","ceil","leftBorder","rightBorder","filter","page","map","key","classNames","active","length","initialValues","onSubmit","values","resetForm","currentPartNumber","goToPageHandler","type","name","value","Friends","dispatch","useDispatch","useSelector","selectFriendsData","items","pageSize","totalCount","selectFriendsPagesCount","useEffect","fetchFriends","onClickFollow","id","fetchFollow","onClickUnfollow","fetchUnfollow","setFriendsPage","visiblePagesSize","friend","index","photos","status","followed","img","large","setCurrentPage","SET_CURRENT_PAGE","payload","setFollowingProgress","data","SET_FOLLOWING","toggleFollow","TOGGLE_FOLLOW_USER","fetchUsers","a","SET_LOADING","usersApi","getUsers","resp","usersData","SET_USERS","followUnfollowFlow","apiMethod","resultCode","isFetching","followUser","unfollowUser"],"mappings":"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","file":"static/js/5.09754b66.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport sprite from '../../../assets/img/sprite.svg';\r\n\r\nfunction NavButton({ handler, disabledTrigger, icoId }) {\r\n   return (\r\n      <button className=\"pagination__btn-item pagination__block\" onClick={handler} disabled={disabledTrigger}>\r\n         <svg className=\"pagination__btn-ico\">\r\n            <use href={sprite + icoId} />\r\n         </svg>\r\n      </button>\r\n   );\r\n}\r\n\r\nexport default NavButton;\r\n","import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport NavButton from './NavButton';\r\n\r\nconst Pagination = React.memo(function Pagination({\r\n   pagesCount,\r\n   currentPage,\r\n   onPageChange,\r\n   isLoading,\r\n   visiblePartSize = 10,\r\n}) {\r\n   const [visiblePartNumber, setVisiblePartNumber] = useState(1);\r\n\r\n   const pages = [];\r\n   for (let i = 1; i <= pagesCount; i++) {\r\n      pages.push(i);\r\n   }\r\n   const visiblePartsCount = Math.ceil(pagesCount / visiblePartSize);\r\n   const leftBorder = (visiblePartNumber - 1) * visiblePartSize + 1;\r\n   const rightBorder = visiblePartNumber * visiblePartSize;\r\n\r\n   const nextPageHandler = () => {\r\n      if (currentPage >= rightBorder) {\r\n         setVisiblePartNumber(visiblePartNumber + 1);\r\n      }\r\n      onPageChange(currentPage + 1);\r\n   };\r\n\r\n   const prevPageHandler = () => {\r\n      if (currentPage <= leftBorder) {\r\n         setVisiblePartNumber(visiblePartNumber - 1);\r\n      }\r\n      onPageChange(currentPage - 1);\r\n   };\r\n\r\n   const toEndHandler = () => {\r\n      setVisiblePartNumber(visiblePartsCount);\r\n      onPageChange((visiblePartsCount - 1) * visiblePartSize + 1);\r\n   };\r\n\r\n   const toStartHandler = () => {\r\n      setVisiblePartNumber(1);\r\n      onPageChange(1);\r\n   };\r\n\r\n   const goToPageHandler = ({ currentPage }, { resetForm }) => {\r\n      const currentPartNumber = Math.ceil(currentPage / visiblePartSize);\r\n      if (currentPage >= 1 && currentPartNumber <= visiblePartsCount) {\r\n         setVisiblePartNumber(currentPartNumber);\r\n         onPageChange(currentPage);\r\n         resetForm();\r\n      }\r\n   };\r\n\r\n   return (\r\n      <ul className=\"pagination\">\r\n         <div className=\"pagination__btn-group\">\r\n            {visiblePartNumber > 1 && (\r\n               <NavButton handler={toStartHandler} disabledTrigger={isLoading} icoId=\"#double-arrow\" />\r\n            )}\r\n            {currentPage > 1 && <NavButton handler={prevPageHandler} disabledTrigger={isLoading} icoId=\"#arrow\" />}\r\n         </div>\r\n         {pages\r\n            .filter((page) => page >= leftBorder && page <= rightBorder)\r\n            .map((page) => {\r\n               return (\r\n                  <li\r\n                     key={page}\r\n                     className={classNames('pagination__item', 'pagination__block', {\r\n                        active: currentPage === page,\r\n                     })}\r\n                     onClick={() => onPageChange(page)}\r\n                  >\r\n                     {page}\r\n                  </li>\r\n               );\r\n            })}\r\n         <div className=\"pagination__btn-group\">\r\n            {visiblePartsCount > visiblePartNumber && (\r\n               <NavButton handler={toEndHandler} disabledTrigger={isLoading} icoId=\"#double-arrow\" />\r\n            )}\r\n            {currentPage < pagesCount && (\r\n               <NavButton handler={nextPageHandler} disabledTrigger={isLoading} icoId=\"#arrow\" />\r\n            )}\r\n         </div>\r\n         {pages.length > 10 && (\r\n            <Formik\r\n               initialValues={{\r\n                  currentPage: '',\r\n               }}\r\n               onSubmit={(values, { resetForm }) => goToPageHandler(values, { resetForm })}\r\n            >\r\n               {({ values }) => (\r\n                  <Form className=\"pagination__form\">\r\n                     <Field\r\n                        type=\"number\"\r\n                        name=\"currentPage\"\r\n                        className=\"pagination__form-input\"\r\n                        value={values.currentPage}\r\n                     />\r\n                     <button className=\"pagination__form-btn\" disabled={isLoading} type=\"submit\">\r\n                        Перейти\r\n                     </button>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n         )}\r\n      </ul>\r\n   );\r\n});\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Friend from './Friend/Friend';\r\nimport { selectFriendsData, selectFriendsPagesCount } from '../../selectors/friendsSelectors';\r\nimport { useEffect } from 'react';\r\nimport { fetchFriends } from '../../actions/friends';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport { setFriendsPage } from '../../actions/friends';\r\nimport { fetchFollow, fetchUnfollow } from '../../actions/users';\r\n\r\nfunction Friends() {\r\n   const dispatch = useDispatch();\r\n   const { items, pageSize, currentPage, totalCount, isLoading } = useSelector(selectFriendsData);\r\n   const pagesCount = useSelector(selectFriendsPagesCount);\r\n\r\n   useEffect(() => {\r\n      dispatch(fetchFriends(currentPage, pageSize, null, true));\r\n   }, [currentPage]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n   const onPageChange = (page) => {\r\n      dispatch(setFriendsPage(page));\r\n   };\r\n\r\n   const onClickFollow = (id) => {\r\n      dispatch(fetchFollow(id));\r\n   };\r\n   const onClickUnfollow = (id) => {\r\n      dispatch(fetchUnfollow(id));\r\n   };\r\n\r\n   return (\r\n      <div className=\"friends block\">\r\n         <div className=\"friends__header\">\r\n            <Pagination\r\n               pagesCount={pagesCount}\r\n               currentPage={currentPage}\r\n               onPageChange={onPageChange}\r\n               isLoading={isLoading}\r\n               visiblePagesSize={pageSize}\r\n            />\r\n\r\n            <div className=\"friends__count\">Подписки {totalCount}</div>\r\n         </div>\r\n         {items.map((friend, index) => {\r\n            const { name, id, photos, status, followed } = friend;\r\n            return (\r\n               <Friend\r\n                  key={`${name}_${index}`}\r\n                  img={photos.large}\r\n                  name={name}\r\n                  id={id}\r\n                  status={status}\r\n                  followed={followed}\r\n                  onClickFollow={onClickFollow}\r\n                  onClickUnfollow={onClickUnfollow}\r\n               />\r\n            );\r\n         })}\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Friends;\r\n","import { usersApi } from '../api/api';\r\n\r\nimport { SET_USERS, SET_CURRENT_PAGE, SET_LOADING, TOGGLE_FOLLOW_USER, SET_FOLLOWING } from './types';\r\n\r\nexport const setUsers = (usersData) => ({\r\n   type: SET_USERS,\r\n   payload: usersData,\r\n});\r\n\r\nexport const setCurrentPage = (page) => ({\r\n   type: SET_CURRENT_PAGE,\r\n   payload: page,\r\n});\r\n\r\nexport const setLoadingProgress = () => ({\r\n   type: SET_LOADING,\r\n});\r\n\r\nexport const setFollowingProgress = (data) => ({\r\n   type: SET_FOLLOWING,\r\n   payload: data,\r\n});\r\n\r\nexport const toggleFollow = (id) => ({\r\n   type: TOGGLE_FOLLOW_USER,\r\n   payload: id,\r\n});\r\n\r\nexport const fetchUsers = (currentPage, pageSize) => async (dispatch) => {\r\n   dispatch(setLoadingProgress());\r\n   const resp = await usersApi.getUsers(currentPage, pageSize);\r\n   dispatch(setUsers(resp));\r\n};\r\n\r\nconst followUnfollowFlow = async (dispatch, id, apiMethod) => {\r\n   const resp = await apiMethod(id);\r\n   if (resp.resultCode === 0) {\r\n      dispatch(toggleFollow(id));\r\n   }\r\n};\r\n\r\nexport const fetchFollow = (id) => async (dispatch) => {\r\n   dispatch(setFollowingProgress({ isFetching: true, id }));\r\n   followUnfollowFlow(dispatch, id, usersApi.followUser);\r\n};\r\n\r\nexport const fetchUnfollow = (id) => async (dispatch) => {\r\n   dispatch(setFollowingProgress({ isFetching: true, id }));\r\n   followUnfollowFlow(dispatch, id, usersApi.unfollowUser);\r\n};\r\n"],"sourceRoot":""}