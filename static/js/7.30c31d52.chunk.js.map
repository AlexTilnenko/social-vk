{"version":3,"sources":["utils/validation/index.js","utils/createField/createField.js","components/Settings/Settings.jsx"],"names":["SiginSchema","yup","shape","login","min","max","required","password","rememberMe","captcha","SettingsSchema","fullName","aboutMe","lookingForAJobDescription","github","matches","mainLink","createField","fieldName","value","labelText","inputType","placeholder","props","className","classNames","checkbox","key","errors","touched","modClassName","error","autoFocus","type","name","removable","id","checked","onClick","removeContactHandler","htmlFor","compose","withAuthRedirect","dispatch","useDispatch","emptyLinksRef","useRef","useState","visibleEmptyLinks","setVisibleEmptyLinks","message","setMessage","myId","useSelector","selectAuthUserId","selectProfileData","userId","lookingForAJob","contacts","emptyLinks","selectEmptySocialsLinks","addedLinks","selectAddedSocialsLinks","useEffect","fetchUserProfile","document","body","addEventListener","outsideClickHandle","removeEventListener","onSuccess","setInterval","onError","linkName","isAdd","setUserContactsLink","addContactHandler","length","e","path","composedPath","includes","current","Loader","enableReinitialize","initialValues","vk","facebook","instagram","twitter","website","youtube","validationSchema","onSubmit","values","data","updateUserProfile","active","ref","map","item","disabled"],"mappings":"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","file":"static/js/7.30c31d52.chunk.js","sourcesContent":["import * as yup from 'yup';\r\n\r\nexport const SiginSchema = yup.object().shape({\r\n   login: yup.string().min(6, 'Слишком короткий логин!').max(50, 'Слишком длинный логин!').required('Введите логин!'),\r\n   password: yup\r\n      .string()\r\n      .min(6, 'Слишком короткий пароль!')\r\n      // .matches(/^(?=.*\\d)(?=.*[a-zA-Z]).{6,}$/g, 'Пароль должен содержать цифры и латинские буквы верхнего и нижнего регистра!')\r\n      .required('Введите пароль!'),\r\n   rememberMe: yup.bool(),\r\n   captcha: yup.string(),\r\n});\r\n\r\nexport const SettingsSchema = yup.object().shape({\r\n   fullName: yup.string().min(6, 'Минимум 6 символов').max(30, 'Максимум 30 символов').required('Обязательное поле'),\r\n   aboutMe: yup.string().min(6, 'Минимум 6 символов').max(80, 'Максимум 80 символов').required('Обязательное поле'),\r\n   lookingForAJobDescription: yup\r\n      .string()\r\n      .min(6, 'Минимум 6 символов')\r\n      .max(80, 'Максимум 80 символов')\r\n      .required('Обязательное поле'),\r\n   github: yup\r\n      .string()\r\n      .matches(/^https?:\\/\\/?[\\w-]{1,32}\\.[\\w-]{1,32}[^\\s@]*$/g, 'Неверный формат контакта! (https://mylink.com)')\r\n      .required('Обязательное поле'),\r\n   mainLink: yup\r\n      .string()\r\n      .matches(/^https?:\\/\\/?[\\w-]{1,32}\\.[\\w-]{1,32}[^\\s@]*$/g, 'Неверный формат контакта! (https://mylink.com)')\r\n      .required('Обязательное поле'),\r\n});\r\n","import React from 'react';\r\nimport { Field } from 'formik';\r\nimport classNames from 'classnames';\r\nfunction createField(fieldName, value, labelText, inputType, placeholder, { ...props }) {\r\n   return (\r\n      <li className={classNames('form__item', { checkbox: inputType === 'checkbox' })} key={fieldName}>\r\n         {inputType !== 'checkbox' && <div className={'form--label'}>{labelText}</div>}\r\n         {props.errors.fieldName && props.touched.fieldName ? (\r\n            <div className=\"error-message\">{props.errors.fieldName}</div>\r\n         ) : null}\r\n         <Field\r\n            className={classNames(`form--${props.modClassName}`, {\r\n               error: props.errors[fieldName] && props.touched[fieldName],\r\n            })}\r\n            autoFocus={props.autoFocus}\r\n            type={inputType}\r\n            placeholder={placeholder}\r\n            name={props.removable ? `contacts.${fieldName}` : fieldName}\r\n            id={props.removable ? `contacts.${fieldName}` : fieldName}\r\n            value={value}\r\n            checked={inputType === 'checkbox' && value}\r\n         />\r\n         {props.removable && (\r\n            <button\r\n               className=\"form__btn form__btn--remove\"\r\n               type=\"button\"\r\n               onClick={() => props.removeContactHandler(fieldName, value ? false : true)}\r\n            >\r\n               Удалить\r\n            </button>\r\n         )}\r\n         {inputType === 'checkbox' && <label htmlFor={fieldName}>{labelText}</label>}\r\n      </li>\r\n   );\r\n}\r\n\r\nexport default createField;\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { Formik, Form } from 'formik';\r\nimport classNames from 'classnames';\r\nimport Loader from '../common/Loader/Loader';\r\nimport withAuthRedirect from '../hoc/withAuthRedirect';\r\nimport createField from '../../utils/createField/createField';\r\nimport { fetchUserProfile, setUserContactsLink, updateUserProfile } from '../../actions/profile';\r\nimport { selectAddedSocialsLinks, selectEmptySocialsLinks, selectProfileData } from '../../selectors/profileSelectors';\r\nimport { selectAuthUserId } from '../../selectors/authSelectors';\r\nimport { SettingsSchema } from '../../utils/validation/';\r\nfunction Settings() {\r\n   const dispatch = useDispatch();\r\n   const emptyLinksRef = useRef();\r\n\r\n   const [visibleEmptyLinks, setVisibleEmptyLinks] = useState(false);\r\n   const [message, setMessage] = useState('');\r\n\r\n   const myId = useSelector(selectAuthUserId);\r\n   const { userId, aboutMe, fullName, lookingForAJob, lookingForAJobDescription, contacts } = useSelector(\r\n      selectProfileData\r\n   );\r\n   const emptyLinks = useSelector(selectEmptySocialsLinks);\r\n   const addedLinks = useSelector(selectAddedSocialsLinks);\r\n\r\n   useEffect(() => {\r\n      if (userId !== myId) {\r\n         dispatch(fetchUserProfile(myId));\r\n      }\r\n      document.body.addEventListener('mousedown', outsideClickHandle);\r\n      return () => {\r\n         document.body.removeEventListener('mousedown', outsideClickHandle);\r\n      };\r\n   }, []); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n   const onSuccess = (message) => {\r\n      setMessage(message);\r\n      setInterval(() => setMessage(''), 3000);\r\n   };\r\n   const onError = (message) => {\r\n      setMessage(message);\r\n      setInterval(() => setMessage(''), 3000);\r\n   };\r\n   const changeUserDataHandler = (data) => {\r\n      dispatch(updateUserProfile(myId, data, onSuccess, onError));\r\n      setMessage(Loader);\r\n   };\r\n   const removeContactHandler = (linkName, isAdd) => {\r\n      dispatch(setUserContactsLink(linkName, isAdd));\r\n   };\r\n   const addContactHandler = () => {\r\n      if (emptyLinks.length) setVisibleEmptyLinks(true);\r\n   };\r\n   const selectContactHandler = (linkName, isAdd) => {\r\n      dispatch(setUserContactsLink(linkName, isAdd));\r\n      setVisibleEmptyLinks(false);\r\n   };\r\n   const outsideClickHandle = (e) => {\r\n      const path = e.path || (e.composedPath && e.composedPath());\r\n      if (!path.includes(emptyLinksRef.current)) {\r\n         setVisibleEmptyLinks(false);\r\n      }\r\n   };\r\n\r\n   if (myId !== userId) {\r\n      return <Loader />;\r\n   }\r\n\r\n   return (\r\n      <div className=\"settings\">\r\n         {message && <div className=\"settings__status-message\">{message}</div>}\r\n         <div className=\"settings__title\">Настройки профиля</div>\r\n         <Formik\r\n            enableReinitialize={true}\r\n            initialValues={{\r\n               fullName: fullName,\r\n               aboutMe: aboutMe,\r\n               lookingForAJob: lookingForAJob,\r\n               lookingForAJobDescription: lookingForAJobDescription,\r\n               contacts: {\r\n                  github: contacts.github,\r\n                  vk: contacts.vk,\r\n                  facebook: contacts.facebook,\r\n                  instagram: contacts.instagram,\r\n                  twitter: contacts.twitter,\r\n                  website: contacts.website,\r\n                  youtube: contacts.youtube,\r\n                  mainLink: contacts.mainLink,\r\n               },\r\n            }}\r\n            validationSchema={SettingsSchema}\r\n            onSubmit={(values) => changeUserDataHandler(values)}\r\n         >\r\n            {({ values, errors, touched }) => (\r\n               <Form className=\"settings-form\">\r\n                  {errors.fullName && touched.fullName ? <div className=\"error-message\">{errors.fullName}</div> : null}\r\n                  {createField('fullName', values.fullName, 'Полное имя:', 'text', 'Введите имя', {\r\n                     errors,\r\n                     touched,\r\n                     modClassName: 'input',\r\n                  })}\r\n                  {errors.aboutMe && touched.aboutMe ? <div className=\"error-message\">{errors.aboutMe}</div> : null}\r\n                  {createField('aboutMe', values.aboutMe, 'Обо мне:', 'text', 'Добавьте немного информации о Вас', {\r\n                     errors,\r\n                     touched,\r\n                     modClassName: 'input',\r\n                  })}\r\n                  {createField('lookingForAJob', values.lookingForAJob, 'В поисках работы?', 'checkbox', null, {\r\n                     errors,\r\n                     touched,\r\n                     modClassName: 'checkbox',\r\n                  })}\r\n                  {errors.lookingForAJobDescription && touched.lookingForAJobDescription ? (\r\n                     <div className=\"error-message\">{errors.lookingForAJobDescription}</div>\r\n                  ) : null}\r\n                  {createField(\r\n                     'lookingForAJobDescription',\r\n                     values.lookingForAJobDescription,\r\n                     'Stack:',\r\n                     'text',\r\n                     'Какими технологиями владеете',\r\n                     {\r\n                        errors,\r\n                        touched,\r\n                        modClassName: 'input',\r\n                     }\r\n                  )}\r\n                  <div className=\"contacts\">\r\n                     <div className=\"contacts__header\">\r\n                        <div className=\"contacts__title\">Контакты:</div>\r\n                        {emptyLinks.length ? (\r\n                           <button\r\n                              className=\"contacts__btn contacts__btn--add\"\r\n                              type=\"button\"\r\n                              onClick={addContactHandler}\r\n                           >\r\n                              Добавить ссылку\r\n                           </button>\r\n                        ) : (\r\n                           ''\r\n                        )}\r\n                     </div>\r\n                     <div className=\"contacts__body\">\r\n                        <div\r\n                           className={classNames('contacts__empty-links', { active: visibleEmptyLinks })}\r\n                           ref={emptyLinksRef}\r\n                        >\r\n                           <div className=\"contacts__empty-links-title\">Выберите соц. сеть:</div>\r\n                           {emptyLinks.map((item) => {\r\n                              return (\r\n                                 <span key={item[0]} onClick={() => selectContactHandler(item[0], true)}>\r\n                                    {item[0]}\r\n                                 </span>\r\n                              );\r\n                           })}\r\n                        </div>\r\n                        <div className=\"contacts__added-links\">\r\n                           {addedLinks.map((item) => {\r\n                              return createField(\r\n                                 item[0],\r\n                                 values.contacts[item[0]],\r\n                                 `${item[0]}:`,\r\n                                 'text',\r\n                                 'Добавьте ссылку на Вашу страницу',\r\n                                 {\r\n                                    errors,\r\n                                    touched,\r\n                                    modClassName: 'input',\r\n                                    autoFocus: true,\r\n                                    removable: true,\r\n                                    removeContactHandler,\r\n                                 }\r\n                              );\r\n                           })}\r\n                        </div>\r\n                     </div>\r\n                  </div>\r\n                  <button\r\n                     className=\"settings-form__submit btn btn--profile-save\"\r\n                     type=\"submit\"\r\n                     disabled={errors.fullName}\r\n                  >\r\n                     Сохранить\r\n                  </button>\r\n               </Form>\r\n            )}\r\n         </Formik>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default compose(withAuthRedirect)(Settings);\r\n"],"sourceRoot":""}