{"version":3,"sources":["components/common/BtnFollowUnfollow/BtnFollowUnfollow.jsx","components/Users/User.jsx","components/common/Pagination/NavButton.jsx","components/common/Pagination/Pagination.jsx","selectors/usersSelectors.js","components/Users/Users.jsx"],"names":["BtnFollowUnfollow","id","followed","unfollowHandler","followHandler","followingInProgress","className","classNames","onClick","disabled","some","item","User","React","memo","name","photos","key","to","src","large","photoHolder","alt","NavButton","handler","disabledTrigger","icoId","href","sprite","Pagination","pagesCount","currentPage","onPageChange","isLoading","visiblePartSize","useState","visiblePartNumber","setVisiblePartNumber","pages","i","push","visiblePartsCount","Math","ceil","leftBorder","rightBorder","filter","page","map","active","length","initialValues","onSubmit","values","resetForm","currentPartNumber","goToPageHandler","type","value","selectUserPagesCount","createSelector","state","users","totalUsersCount","pageSize","selectUsersData","compose","withFollowUnfollow","dispatch","useDispatch","useSelector","items","useEffect","fetchUsers","Loader","setCurrentPage","visiblePagesSize"],"mappings":"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","file":"static/js/8.d0d0815d.chunk.js","sourcesContent":["import React from 'react';\r\nimport classNames from 'classnames';\r\n\r\nfunction BtnFollowUnfollow({ id, followed, unfollowHandler, followHandler, followingInProgress }) {\r\n   return (\r\n      <button\r\n         className={classNames('btn', { 'btn--unfollow': followed, 'btn--follow': !followed })}\r\n         onClick={followed ? () => unfollowHandler(id) : () => followHandler(id)}\r\n         disabled={followingInProgress && followingInProgress.some((item) => item === id)}\r\n      >\r\n         {followed ? 'Отписаться' : 'Подписаться'}\r\n      </button>\r\n   );\r\n}\r\n\r\nexport default BtnFollowUnfollow;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport BtnFollowUnfollow from '../common/BtnFollowUnfollow/BtnFollowUnfollow';\r\n\r\nimport photoHolder from '../../assets/img/user.png';\r\n\r\nconst User = React.memo(function User({\r\n   id,\r\n   name,\r\n   photos,\r\n   followed,\r\n   followingInProgress,\r\n   followHandler,\r\n   unfollowHandler,\r\n}) {\r\n   return (\r\n      <li className=\"users__item block\" key={id}>\r\n         <Link to={`/profile/${id}`}>\r\n            <span className=\"users__item-photo\">\r\n               <img src={photos.large || photoHolder} alt={name} />\r\n            </span>\r\n            <span className=\"users__item-name\">{name}</span>\r\n         </Link>\r\n         <BtnFollowUnfollow\r\n            id={id}\r\n            followed={followed}\r\n            followHandler={followHandler}\r\n            unfollowHandler={unfollowHandler}\r\n            followingInProgress={followingInProgress}\r\n         />\r\n      </li>\r\n   );\r\n});\r\n\r\nUser.propTypes = {\r\n   id: PropTypes.number.isRequired,\r\n   name: PropTypes.string,\r\n   photos: PropTypes.object,\r\n   followed: PropTypes.bool,\r\n   followingInProgress: PropTypes.array.isRequired,\r\n   followHandler: PropTypes.func.isRequired,\r\n   unfollowHandler: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default User;\r\n","import React from 'react';\r\n\r\nimport sprite from '../../../assets/img/sprite.svg';\r\n\r\nfunction NavButton({ handler, disabledTrigger, icoId }) {\r\n   return (\r\n      <button className=\"pagination__btn-item pagination__block\" onClick={handler} disabled={disabledTrigger}>\r\n         <svg className=\"pagination__btn-ico\">\r\n            <use href={sprite + icoId} />\r\n         </svg>\r\n      </button>\r\n   );\r\n}\r\n\r\nexport default NavButton;\r\n","import React, { useState } from 'react';\r\nimport classNames from 'classnames';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport NavButton from './NavButton';\r\n\r\nconst Pagination = React.memo(function Pagination({\r\n   pagesCount,\r\n   currentPage,\r\n   onPageChange,\r\n   isLoading,\r\n   visiblePartSize = 10,\r\n}) {\r\n   const [visiblePartNumber, setVisiblePartNumber] = useState(1);\r\n\r\n   const pages = [];\r\n   for (let i = 1; i <= pagesCount; i++) {\r\n      pages.push(i);\r\n   }\r\n   const visiblePartsCount = Math.ceil(pagesCount / visiblePartSize);\r\n   const leftBorder = (visiblePartNumber - 1) * visiblePartSize + 1;\r\n   const rightBorder = visiblePartNumber * visiblePartSize;\r\n\r\n   const nextPageHandler = () => {\r\n      if (currentPage >= rightBorder) {\r\n         setVisiblePartNumber(visiblePartNumber + 1);\r\n      }\r\n      onPageChange(currentPage + 1);\r\n   };\r\n\r\n   const prevPageHandler = () => {\r\n      if (currentPage <= leftBorder) {\r\n         setVisiblePartNumber(visiblePartNumber - 1);\r\n      }\r\n      onPageChange(currentPage - 1);\r\n   };\r\n\r\n   const toEndHandler = () => {\r\n      setVisiblePartNumber(visiblePartsCount);\r\n      onPageChange((visiblePartsCount - 1) * visiblePartSize + 1);\r\n   };\r\n\r\n   const toStartHandler = () => {\r\n      setVisiblePartNumber(1);\r\n      onPageChange(1);\r\n   };\r\n\r\n   const goToPageHandler = ({ currentPage }, { resetForm }) => {\r\n      const currentPartNumber = Math.ceil(currentPage / visiblePartSize);\r\n      if (currentPage >= 1 && currentPartNumber <= visiblePartsCount) {\r\n         setVisiblePartNumber(currentPartNumber);\r\n         onPageChange(currentPage);\r\n         resetForm();\r\n      }\r\n   };\r\n\r\n   return (\r\n      <ul className=\"pagination\">\r\n         <div className=\"pagination__btn-group\">\r\n            {visiblePartNumber > 1 && (\r\n               <NavButton handler={toStartHandler} disabledTrigger={isLoading} icoId=\"#double-arrow\" />\r\n            )}\r\n            {currentPage > 1 && <NavButton handler={prevPageHandler} disabledTrigger={isLoading} icoId=\"#arrow\" />}\r\n         </div>\r\n         {pages\r\n            .filter((page) => page >= leftBorder && page <= rightBorder)\r\n            .map((page) => {\r\n               return (\r\n                  <li\r\n                     key={page}\r\n                     className={classNames('pagination__item', 'pagination__block', {\r\n                        active: currentPage === page,\r\n                     })}\r\n                     onClick={() => onPageChange(page)}\r\n                  >\r\n                     {page}\r\n                  </li>\r\n               );\r\n            })}\r\n         <div className=\"pagination__btn-group\">\r\n            {visiblePartsCount > visiblePartNumber && (\r\n               <NavButton handler={toEndHandler} disabledTrigger={isLoading} icoId=\"#double-arrow\" />\r\n            )}\r\n            {currentPage < pagesCount && (\r\n               <NavButton handler={nextPageHandler} disabledTrigger={isLoading} icoId=\"#arrow\" />\r\n            )}\r\n         </div>\r\n         {pages.length > 10 && (\r\n            <Formik\r\n               initialValues={{\r\n                  currentPage: '',\r\n               }}\r\n               onSubmit={(values, { resetForm }) => goToPageHandler(values, { resetForm })}\r\n            >\r\n               {({ values }) => (\r\n                  <Form className=\"pagination__form\">\r\n                     <Field\r\n                        type=\"number\"\r\n                        name=\"currentPage\"\r\n                        className=\"pagination__form-input\"\r\n                        value={values.currentPage}\r\n                     />\r\n                     <button className=\"pagination__form-btn\" disabled={isLoading} type=\"submit\">\r\n                        Перейти\r\n                     </button>\r\n                  </Form>\r\n               )}\r\n            </Formik>\r\n         )}\r\n      </ul>\r\n   );\r\n});\r\n\r\nexport default Pagination;\r\n","import { createSelector } from 'reselect';\r\n\r\nexport const selectUserPagesCount = createSelector(\r\n   (state) => state.users, \r\n   ({totalUsersCount, pageSize}) => Math.ceil(totalUsersCount / pageSize)\r\n   );\r\nexport const selectUsersData = (state) => state.users;\r\n","import React, { useEffect } from 'react';\r\nimport { compose } from 'redux';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport User from './User';\r\nimport Loader from '../common/Loader/Loader';\r\nimport Pagination from '../common/Pagination/Pagination';\r\nimport { fetchUsers, setCurrentPage } from '../../actions/users';\r\nimport { selectUserPagesCount, selectUsersData } from '../../selectors/usersSelectors';\r\nimport withFollowUnfollow from '../hoc/withFollowUnfollow';\r\n\r\nfunction Users({ followHandler, unfollowHandler }) {\r\n   const dispatch = useDispatch();\r\n   const { items, pageSize, currentPage, isLoading, followingInProgress } = useSelector(selectUsersData);\r\n   const pagesCount = useSelector(selectUserPagesCount);\r\n   useEffect(() => {\r\n      dispatch(fetchUsers(currentPage, pageSize));\r\n   }, [currentPage]); // eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n   const onPageChange = (page) => {\r\n      dispatch(setCurrentPage(page));\r\n   };\r\n\r\n   return (\r\n      <div className=\"users\">\r\n         {isLoading && <Loader />}\r\n         <Pagination\r\n            pagesCount={pagesCount}\r\n            currentPage={currentPage}\r\n            onPageChange={onPageChange}\r\n            isLoading={isLoading}\r\n            visiblePagesSize={10}\r\n         />\r\n         <ul className=\"users__list\">\r\n            {items.map(({ id, name, followed, photos }) => {\r\n               return (\r\n                  <User\r\n                     key={id}\r\n                     id={id}\r\n                     name={name}\r\n                     photos={photos}\r\n                     followed={followed}\r\n                     followingInProgress={followingInProgress}\r\n                     followHandler={followHandler}\r\n                     unfollowHandler={unfollowHandler}\r\n                  />\r\n               );\r\n            })}\r\n         </ul>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default compose(withFollowUnfollow)(Users);\r\n"],"sourceRoot":""}