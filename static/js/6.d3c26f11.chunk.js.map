{"version":3,"sources":["utils/validation/index.js","components/Login/Login.jsx"],"names":["SiginSchema","yup","shape","login","min","max","required","password","rememberMe","captcha","SettingsSchema","fullName","aboutMe","lookingForAJobDescription","mainLink","matches","Login","dispatch","useDispatch","useState","errorMessage","setErrorMessage","useSelector","selectAuthData","captchaUrl","isAuth","to","className","initialValues","validationSchema","onSubmit","values","message","loginHandle","errors","touched","classNames","error","type","placeholder","name","value","id","htmlFor","src","alt","disabled"],"mappings":"kGAAA,iFAEaA,EAAcC,MAAaC,MAAM,CAC3CC,MAAOF,MAAaG,IAAI,EAAG,+HAA2BC,IAAI,GAAI,yHAA0BC,SAAS,8EACjGC,SAAUN,MAENG,IAAI,EAAG,qIAEPE,SAAS,oFACbE,WAAYP,MACZQ,QAASR,QAGCS,EAAiBT,MAAaC,MAAM,CAC9CS,SAAUV,MAAaG,IAAI,GAAGC,IAAI,IAAIC,WACtCM,QAASX,MAAaG,IAAI,GAAGC,IAAI,IAAIC,WACrCO,0BAA2BZ,MAAaG,IAAI,GAAGC,IAAI,IAAIC,WACvDQ,SAAUb,MAENc,QAAQ,iDAAkD,mK,oIC6ElDC,UAvFf,WACG,IAAMC,EAAWC,cADH,EAE0BC,mBAAS,IAFnC,mBAEPC,EAFO,KAEOC,EAFP,OAIiBC,YAAYC,KAAnCC,EAJM,EAINA,WAUR,OAdc,EAIMC,OAWV,kBAAC,IAAD,CAAUC,GAAG,aAGpB,yBAAKC,UAAU,uBACZ,wBAAIA,UAAU,eAAd,yHACA,kBAAC,IAAD,CACGC,cAAe,CACZzB,MAAO,GACPI,SAAU,GACVC,YAAY,EACZC,QAAS,IAEZoB,iBAAkB7B,IAClB8B,SAAU,SAACC,GAAD,OAtBC,SAACA,GAClBd,EACGd,YAAM4B,GAAQ,SAACC,GACZX,EAAgBW,OAmBMC,CAAYF,MAEjC,gBAAGA,EAAH,EAAGA,OAAQG,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAAnB,OACE,kBAAC,IAAD,CAAMR,UAAU,cACZP,GAAgB,yBAAKO,UAAU,iBAAiBP,GACjD,kBAAC,IAAD,CACGO,UAAWS,IAAW,mBAAoB,oBAAqB,CAC5DC,MAAOH,EAAO/B,OAASgC,EAAQhC,QAElCmC,KAAK,OACLC,YAAY,iCACZC,KAAK,QACLC,MAAOV,EAAO5B,QAEhB+B,EAAO/B,OAASgC,EAAQhC,MAAQ,yBAAKwB,UAAU,iBAAiBO,EAAO/B,OAAe,KACvF,kBAAC,IAAD,CACGwB,UAAWS,IAAW,mBAAoB,oBAAqB,CAC5DC,MAAOH,EAAO3B,UAAY4B,EAAQ5B,WAErC+B,KAAK,WACLC,YAAY,uCACZC,KAAK,WACLC,MAAOV,EAAOxB,WAEhB2B,EAAO3B,UAAY4B,EAAQ5B,SAAW,yBAAKoB,UAAU,iBAAiBO,EAAO3B,UAAkB,KAEhG,yBAAKoB,UAAU,6BACZ,kBAAC,IAAD,CAAOA,UAAU,sBAAsBW,KAAK,WAAWI,GAAG,aAAaF,KAAK,eAC5E,2BAAOb,UAAU,mBAAmBgB,QAAQ,cAA5C,oFAIFnB,GACE,yBAAKG,UAAU,wCACZ,yBAAKiB,IAAKpB,EAAYqB,IAAI,KAC1B,kBAAC,IAAD,CACGlB,UAAWS,IAAW,oBAAqB,CACxCC,MAAOH,EAAOzB,SAAW0B,EAAQ1B,UAEpC6B,KAAK,OACLC,YAAY,oIACZC,KAAK,aAId,4BACGb,UAAU,oCACVW,KAAK,SACLQ,SAAUZ,EAAO/B,OAAS+B,EAAO3B,UAHpC","file":"static/js/6.d3c26f11.chunk.js","sourcesContent":["import * as yup from 'yup';\r\n\r\nexport const SiginSchema = yup.object().shape({\r\n   login: yup.string().min(6, 'Слишком короткий логин!').max(50, 'Слишком длинный логин!').required('Введите логин!'),\r\n   password: yup\r\n      .string()\r\n      .min(6, 'Слишком короткий пароль!')\r\n      // .matches(/^(?=.*\\d)(?=.*[a-zA-Z]).{6,}$/g, 'Пароль должен содержать цифры и латинские буквы верхнего и нижнего регистра!')\r\n      .required('Введите пароль!'),\r\n   rememberMe: yup.bool(),\r\n   captcha: yup.string(),\r\n});\r\n\r\nexport const SettingsSchema = yup.object().shape({\r\n   fullName: yup.string().min(2).max(20).required(),\r\n   aboutMe: yup.string().min(2).max(60).required(),\r\n   lookingForAJobDescription: yup.string().min(2).max(20).required(),\r\n   mainLink: yup\r\n      .string()\r\n      .matches(/^https?:\\/\\/?[\\w-]{1,32}\\.[\\w-]{1,32}[^\\s@]*$/g, 'Неверный формат контакта! (https://mylink.com)'),\r\n});\r\n","import React, { useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Redirect } from 'react-router';\r\nimport classNames from 'classnames';\r\nimport { Formik, Field, Form } from 'formik';\r\nimport { login } from '../../actions/auth';\r\nimport { SiginSchema } from '../../utils/validation';\r\nimport { selectAuthData } from '../../selectors/authSelectors';\r\n\r\nfunction Login() {\r\n   const dispatch = useDispatch();\r\n   const [errorMessage, setErrorMessage] = useState('');\r\n\r\n   const { captchaUrl, isAuth } = useSelector(selectAuthData);\r\n\r\n   const loginHandle = (values) => {\r\n      dispatch(\r\n         login(values, (message) => {\r\n            setErrorMessage(message);\r\n         })\r\n      );\r\n   };\r\n\r\n   if (isAuth) {\r\n      return <Redirect to=\"/profile\" />;\r\n   }\r\n   return (\r\n      <div className=\"login-wrapper block\">\r\n         <h1 className=\"login-title\">Войдите в свой аккаунт</h1>\r\n         <Formik\r\n            initialValues={{\r\n               login: '',\r\n               password: '',\r\n               rememberMe: false,\r\n               captcha: '',\r\n            }}\r\n            validationSchema={SiginSchema}\r\n            onSubmit={(values) => loginHandle(values)}\r\n         >\r\n            {({ values, errors, touched }) => (\r\n               <Form className=\"login-form\">\r\n                  {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\r\n                  <Field\r\n                     className={classNames('login-form__item', 'login-form--input', {\r\n                        error: errors.login && touched.login,\r\n                     })}\r\n                     type=\"text\"\r\n                     placeholder=\"Логин\"\r\n                     name=\"login\"\r\n                     value={values.login}\r\n                  />\r\n                  {errors.login && touched.login ? <div className=\"error-message\">{errors.login}</div> : null}\r\n                  <Field\r\n                     className={classNames('login-form__item', 'login-form--input', {\r\n                        error: errors.password && touched.password,\r\n                     })}\r\n                     type=\"password\"\r\n                     placeholder=\"Пароль\"\r\n                     name=\"password\"\r\n                     value={values.password}\r\n                  />\r\n                  {errors.password && touched.password ? <div className=\"error-message\">{errors.password}</div> : null}\r\n\r\n                  <div className=\"login-form__item checkbox\">\r\n                     <Field className=\"login-form-checkbox\" type=\"checkbox\" id=\"rememberMe\" name=\"rememberMe\" />\r\n                     <label className=\"login-form-label\" htmlFor=\"rememberMe\">\r\n                        Запомнить меня\r\n                     </label>\r\n                  </div>\r\n                  {captchaUrl && (\r\n                     <div className=\"login-form__item login-form--captcha\">\r\n                        <img src={captchaUrl} alt=\"\" />\r\n                        <Field\r\n                           className={classNames('login-form--input', {\r\n                              error: errors.captcha && touched.captcha,\r\n                           })}\r\n                           type=\"text\"\r\n                           placeholder=\"Введите текст с картинки\"\r\n                           name=\"captcha\"\r\n                        />\r\n                     </div>\r\n                  )}\r\n                  <button\r\n                     className=\"login-form__submit btn btn--login\"\r\n                     type=\"submit\"\r\n                     disabled={errors.login || errors.password}\r\n                  >\r\n                     Войти\r\n                  </button>\r\n               </Form>\r\n            )}\r\n         </Formik>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Login;\r\n"],"sourceRoot":""}